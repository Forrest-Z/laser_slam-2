#pragma once
//AGMap
#define _1M 1024*1024
#define _10M 10*1024*1024
#define _100M 100*1024*1024
#define MAX_RAWDATA_FILE_NUM 100
#define PROB_MAP_W 50
#define PROB_MAP_H 50

#define RTN_OK 0
#define RTN_LOSS_RS_CNC -11
#define RTN_RS_CNC_NOR 11
#define RTN_RS_CNC_RECNC 12

#define RTN_LOSS_LASER_CNC -21


#define LASER_NUM 2

#define LOG_NET 0
#define LOG_SLAM 1
#define LOG_IOA 2
#define LOG_SUBCTRL 3

//IOA
#define SECURITY_AREA_NUM 5
#define LELVEL4 5.0
#define LELVEL3 4.0
#define LELVEL2 3.0
#define LELVEL1 2.0
#define LELVEL0 1.0

#define MAX_SPEED_L4  4
#define MAX_SPEED_L3  3
#define MAX_SPEED_L2  2
#define MAX_SPEED_L1  1
#define MAX_SPEED_L0  0.5

typedef int (*CallBack_BNLctAndOdometry)(char *pcData);
typedef int (*CallBack_LogFile)(char* pcContent,int nModuleIdx);//2012 11 14 add

typedef int (*CallBack_Forward)();
typedef int (*CallBack_Backward)();
typedef int (*CallBack_Turn)();
typedef int (*CallBack_Break)();



typedef int (*CallBack_)(char *pcData);

typedef struct  SimpleCtrlCmd
{
	CallBack_Forward cbForward;
	CallBack_Backward cbBackward;
	CallBack_Turn cbTurn;
	CallBack_Break cbBreak;
}SimpleCtrlCmd;






typedef int (*CallBack_NetUpload)(char *pcData,int nDataLen);



typedef int (*CallBack_Update2DGridMap)();



typedef int (*CallBack_LaserData)(char *pcData,int nDataLen);
typedef int (*CallBack_LaserDtct)(char *pcDtctRslt);



typedef int (*CallBack_TaskIn)(int nTaskType,char *pcData,int nDataLen);
#define NEW_TASK_PATH 0x00000001
#define RE_TASK_PATH 0x00000002
#define SLOW_BREAK 0x00100000
#define GRID_MAP_IN 0x00000010



#define ERR_TOLERATE 0.3


typedef struct Point_f
{
	float fX;
	float fY;
	float fLen;
}Point_f;

typedef struct Pos_f
{
	Point_f stPoint;
	float fTheta;
}Pos_f;

typedef struct RectilinearCtrl
{
	char cType;
	float fTAcc;
	float fTUni;
	float fTDeacc;
	float fVm;
	float fA;
	float fCurSpd;
}RectilinearCtrl;


typedef struct AccTable
{
	float fAccLen;
	float fDeacclen;
}AccTable;

#define MOTION_ERR 0.5
#define WHEEL_RADIOUS 200
#define PI 3.1415926

#define MAX_ACC_SPD 0.4

#define MAX_DEACC_SPD -0.6

#define MAX_TURNNING_SPD 0.3
#define MAX_SPD 3

#define CMD_SLICE_LEN 0.04


#define MIN_RECTIL_LEN 1
#define IDEAL_RADIUS 1.5
#define IDEAL_PRE_RADIUS 2
#define TURNNING_TIME 1


#define SICK_LINES 541
#define INIT_ANGLE 225
#define SICK_RESOLUTION 0.5
#define SECURTY_WIDTH 0.25
#define SPD_LMT_NUM 4

#define ROBOT_L 0.54





typedef struct IOA_Pos
{
	float fX;
	float fY;
	int nIdxX;
	int nIdxY;

	float fDis;
}IOA_Pos;


#define MAP_INIT_WEIGHT 0
#define MAP_UNFREE_AREA 255
#define MAP_FREE_AREA 200
#define MAP_TMP_OBSTACLE 100
#define MAP_STATIC_OBSTACLE 1

#define ROBOT_WIDTH_IN_2DMAP 6

#define MIN(a,b)((a)<(b))?(a):(b)

//Channel B Protocol
#define ROB_REACH_MIL 0x0001


typedef int (*CallBack_SendNKJCMD)(float fVL,float fVR,int nLTime,int nRTime);


#define MAX_SPD 0.7


